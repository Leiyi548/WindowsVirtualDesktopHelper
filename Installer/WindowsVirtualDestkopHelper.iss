; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Windows Virtual Desktop Helper"
#define MyAppVersion "1.0"
#define MyAppPublisher "Dan Krusi"
#define MyAppURL "https://dankrusi.com/windows-virtual-desktop-helper"
#define MyAppExeName "WindowsVirtualDesktopHelper.exe"      
#define DotNetInstallerExe "dotNet472Setup.exe"    
#define DotNetMinVer "net45"
#define DotNetMinVerNice "v4.5"

[CustomMessages]
InstallingDotNetFramework=Installing .NET Framework. This might take a few minutes...  
DotNetFrameworkFailedToLaunch=Failed to launch .NET Framework Installer with error "%1" (%2). Please fix the error then run this installer again.
DotNetFrameworkFailedToLaunch=Failed to launch .NET Framework Installer with error "%1" (%2). Admin privelages are required to install the .NET Framework. Please restart the installer with Admin privelages.
DotNetFrameworkFailed1602=.NET Framework installation was cancelled. This installation can continue, but be aware that this application may not run unless the .NET Framework installation is completed successfully.
DotNetFrameworkFailed1603=A fatal error occurred while installing the .NET Framework. Please fix the error, then run the installer again.
DotNetFrameworkFailed5100=Your computer does not meet the requirements of the .NET Framework. Please consult the documentation.
DotNetFrameworkFailedOther=The .NET Framework installer exited with an unexpected status code "%1". Please review any other messages shown by the installer to determine whether the installation completed successfully, and abort this installation and fix the problem if it did not.




[Code]
// Adapted from https://antonymale.co.uk/installing-dotnet-using-inno-setup.html
var
  GlobalRestartRequired: boolean;

function DotNetIsMissing(): Boolean;
begin
  //Result := IsDotNetInstalled(net45, 0);
  if IsDotNetInstalled({#DotNetMinVer}, 0) then
  begin          
    Result := false;
  end else begin
    Result := true;
  end;
end;

function InstallDotNet(): Boolean;
var
  ResultCode: Integer;
begin
  try
    ExtractTemporaryFile('{#DotNetInstallerExe}');
    if not Exec(ExpandConstant('{tmp}\{#DotNetInstallerExe}'), '/passive /norestart /showrmui /showfinalerror', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      case ResultCode of
        704 : begin
          MsgBox(FmtMessage(CustomMessage('DotNetFrameworkFailedToLaunch704'), [SysErrorMessage(ResultCode),IntToStr(ResultCode)]), mbInformation, MB_OK);     
          Result := false;
        end;
        else begin    
          MsgBox(FmtMessage(CustomMessage('DotNetFrameworkFailedToLaunch'), [SysErrorMessage(ResultCode),IntToStr(ResultCode)]), mbInformation, MB_OK);     
          Result := false;
        end;
      end;
    end
    else
    begin
      // See https://msdn.microsoft.com/en-us/library/ee942965(v=vs.110).aspx#return_codes
      case ResultCode of
        0: begin
          // Successful     
          Result := true;
        end;
        1602 : begin
          MsgBox(CustomMessage('DotNetFrameworkFailed1602'), mbInformation, MB_OK);     
          Result := false;
        end;
        1603: begin     
          MsgBox(CustomMessage('DotNetFrameworkFailed1603'), mbInformation, MB_OK);
          Result := false;
        end;
        1641: begin
          GlobalRestartRequired := True;
        end;
        3010: begin
          GlobalRestartRequired := True;
        end;
        5100: begin 
          MsgBox(CustomMessage('DotNetFrameworkFailed5100'), mbInformation, MB_OK);
          Result := false;
        end;
        else begin    
          MsgBox(FmtMessage(CustomMessage('DotNetFrameworkFailedOther'), [IntToStr(ResultCode)]), mbError, MB_OK);
          Result := false;
        end;
      end;
    end;
  finally
  end;
end;


// Return True to instruct Setup to prompt the user to restart the system at the end of a successful installation, False otherwise.
function NeedRestart(): Boolean;
begin
  Result := GlobalRestartRequired;
end;

// Called during Setup's initialization. Return False to abort Setup, True otherwise.
function InitializeSetup(): Boolean;
begin
  if DotNetIsMissing() then
  //if true then
  begin          
    if MsgBox('{#MyAppName} requires Microsoft .NET Framework {#DotNetMinVerNice} or newer to run. Would you like to install it now?', mbConfirmation, MB_YESNO) = IDYES then
    begin
      Result := InstallDotNet();
    end else begin
      MsgBox('You can install {#MyAppName} without Microsoft .NET Framework, however the application will only run if .NET Framework is installed.', mbInformation, MB_OK);
      Result := true;
    end
  end else begin
    Result := true;
  end;
end;

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D1D175D1-113A-4C7E-8D2E-6DCC4F6FD843}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=C:\Users\dankrusi\Code\WindowsVirtualDesktopHelper\LICENSE
;InfoBeforeFile=C:\Users\dankrusi\Code\WindowsVirtualDesktopHelper\EULA
; Uncomment the following line to run in non administrative install mode (install for current user only.)
PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputBaseFilename=Windows Virtual Desktop Helper Setup
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]  
; NOTE: this causes issues with windows defender?                                                                                                
Name: "autostart"; Description: "Autostart with Windows"; GroupDescription: "Additional options:"; Flags: checkablealone
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]     
Source: "{#DotNetInstallerExe}"; DestDir: "{tmp}"; Flags: dontcopy nocompression noencryption
Source: "..\App\bin\Release\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files         
; This should be near the beginning, as it's extracted individually first

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon     
; NOTE: this causes issues with windows defender? 
; NOTE: should this be userstartup instead? 
Name: "{userstartup}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: autostart    

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

